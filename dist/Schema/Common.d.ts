import { integer } from "@deepkit/type";
export type Column<T extends VaildExcelType> = {
    i: integer;
    dt: TypeToString<T>;
    key: string;
};
type VaildExcelType = string | number | number[] | string[];
type TypeToString<T extends VaildExcelType> = T extends string ? 'string' : T extends integer ? 'int' : T extends string[] ? 'string[]' : T extends integer[] ? 'int[]' : never;
export type SourceThing = {
    id: string;
    name_JP: string;
    unknown_JP: string;
    unit_JP: string;
    naming: string;
    name: string;
    unit: string;
    unknown: string;
    category: string;
    sort: number;
    _tileType: string;
    _idRenderData: string;
    tiles: number[];
    altTiles: number[];
    anime: number[];
    skins: number[];
    size: number[];
    colorMod: number[];
    colorType: number[];
    recipeKey: string;
    factory: string[];
    components: string[];
    disassemble: string[];
    defMat: string[];
    tierGroup: string;
    value: number;
    LV: number;
    chance: number;
    quality: number;
    HP: number;
    weight: number;
    electricity: number;
    trait: string[];
    elements: string[];
    range: number;
    attackType: string;
    offense: number[];
    substats: number[];
    defense: number[];
    lightData: string;
    idExtra: string;
    idToggleExtra: string;
    idActorEx: string;
    idSound: string;
    tag: string;
    workTag: string[];
    filter: string;
    roomName_JP: string;
    roomName: string;
    detail_JP: string;
    detail: string;
};
export {};
export declare type __ΩColumn = any[];
export declare type __ΩSourceThing = any[];
